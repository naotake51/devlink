// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/__generated__/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id             String               @id @default(uuid()) @db.Uuid
  displayName    String
  avatarUrl      String?
  createdAt      DateTime             @default(now())
  projectMembers ProjectMember[]
  applications   ProjectApplication[]
}

model Project {
  id             String               @id @default(uuid()) @db.Uuid
  title          String
  description    String               @db.Text
  startDate      DateTime
  createdAt      DateTime             @default(now())
  projectMembers ProjectMember[]
  sprints        Sprint[]
  applications   ProjectApplication[]
}

enum ProjectMemberRole {
  OWNER
  MEMBER
}

model ProjectMember {
  id                                String                     @id @default(uuid()) @db.Uuid
  projectId                         String                     @db.Uuid
  project                           Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId                         String                     @db.Uuid
  profile                           Profile                    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  role                              ProjectMemberRole
  devPoint                          Int
  initialDevPoint                   Int
  createdAt                         DateTime                   @default(now())
  sprintVotes                       SprintVote[]
  receivedSprintVoteAllocations     SprintVoteAllocation[]
  receivedSprintDividendAllocations SprintDividendAllocation[]

  @@unique([projectId, profileId])
}

model Sprint {
  id             String          @id @default(uuid()) @db.Uuid
  projectId      String          @db.Uuid
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprintNumber   Int
  startDate      DateTime
  endDate        DateTime
  voteStartDate  DateTime
  voteEndDate    DateTime
  createdAt      DateTime        @default(now())
  sprintVotes    SprintVote[]
  sprintDividend SprintDividend?

  @@unique([projectId, sprintNumber])
}

model SprintVote {
  id          String                 @id @default(uuid()) @db.Uuid
  sprintId    String                 @db.Uuid
  sprint      Sprint                 @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  memberId    String                 @db.Uuid
  member      ProjectMember          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  devPoint    Int
  allocations SprintVoteAllocation[]
  createdAt   DateTime               @default(now())

  @@unique([sprintId, memberId])
}

model SprintVoteAllocation {
  id           String        @id @default(uuid()) @db.Uuid
  sprintVoteId String        @db.Uuid
  sprintVote   SprintVote    @relation(fields: [sprintVoteId], references: [id], onDelete: Cascade)
  memberId     String        @db.Uuid
  member       ProjectMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  devPoint     Int
  createdAt    DateTime      @default(now())

  @@unique([sprintVoteId, memberId])
}

model SprintDividend {
  id          String                     @id @default(uuid()) @db.Uuid
  sprintId    String                     @db.Uuid
  sprint      Sprint                     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  devPoint    Int
  createdAt   DateTime                   @default(now())
  allocations SprintDividendAllocation[]

  @@unique([sprintId])
}

model SprintDividendAllocation {
  id               String         @id @default(uuid()) @db.Uuid
  sprintDividendId String         @db.Uuid
  sprintDividend   SprintDividend @relation(fields: [sprintDividendId], references: [id], onDelete: Cascade)
  memberId         String         @db.Uuid
  member           ProjectMember  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  devPoint         Int
  createdAt        DateTime       @default(now())

  @@unique([sprintDividendId, memberId])
}

enum ProjectApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model ProjectApplication {
  id        String                   @id @default(uuid()) @db.Uuid
  projectId String                   @db.Uuid
  project   Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId String                   @db.Uuid
  profile   Profile                  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  message   String                   @db.Text
  status    ProjectApplicationStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  @@unique([projectId, profileId])
}
